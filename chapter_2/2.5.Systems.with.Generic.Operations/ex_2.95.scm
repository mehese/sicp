#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 3048 0 28 3 10 #"#lang sicp"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Racket hash table"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"only"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"only"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"#%require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"only"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"*op-table*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #") ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"*op-table*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"*op-table*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 17 3 26 #";; '() evaluates as #t o_O"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; Coercions table"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"*coercion-table*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"put-coercion"
0 0 24 3 1 #" "
0 0 14 3 5 #"type1"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 1 #" "
0 0 14 3 12 #"type1->type2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"*coercion-table*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"type1"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 2 #") "
0 0 14 3 12 #"type1->type2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 14 3 5 #"type1"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 16 #"*coercion-table*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"type1"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; Tags and applys"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 2 #") "
0 0 14 3 8 #"contents"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 66
#"\"What are you trying to tag here? Ain't a pair and ain't a number\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 13 #"scheme-number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Bad tagged datum: TYPE-TAG\""
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 2 #") "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Bad tagged datum: CONTENTS\""
0 0 24 3 1 #" "
0 0 14 3 5 #"datum"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; Just using the regular apply generic, let's not confuse stuff wit"
 #"h drops"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";;  and raises"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"type-tags"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 8 #"contents"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"type1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"type2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"t1->t2"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 14 3 5 #"type1"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"t2->t1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-coercion"
0 0 24 3 1 #" "
0 0 14 3 5 #"type2"
0 0 24 3 1 #" "
0 0 14 3 5 #"type1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #" ("
0 0 14 3 6 #"t1->t2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 6 #"t1->t2"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #") "
0 0 14 3 2 #"a2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"t2->t1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"t2->t1"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"No method for these types\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"No method for these types\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; Implementation of all to make our life easier"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 3 #"all"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 32 #"install-number-operation-aliases"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"greatest-common-div"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 19 #"greatest-common-div"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-number"
0 0 24 3 2 #") "
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-number"
0 0 24 3 2 #") "
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-number"
0 0 24 3 2 #") "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-number"
0 0 24 3 2 #") "
0 0 14 3 1 #"/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 53 #";; Just in case we'll need gcd to scheme-number later"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"gcd"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 2 #") "
0 0 14 3 19 #"greatest-common-div"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"scheme-number"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 40 #"done-installing-scheme-operation-aliases"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 32 #"install-number-operation-aliases"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"install-rational-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #";; internal procedures"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 37 #";; This one goes back to the original"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"g"
0 0 24 3 2 #" ("
0 0 14 3 3 #"gcd"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sub-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mul-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"div-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"make-rat"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"denom"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"numer"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 34 #";; interface to rest of the system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"add-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"sub"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sub-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mul-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"rational"
0 0 24 3 1 #" "
0 0 14 3 8 #"rational"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 7 #"div-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-rat"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 14 3 32 #"done-installing-rational-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"install-rational-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-rational"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #") (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"rational"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"install-polynomial-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-poly"
0 0 24 3 1 #" "
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"variable?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #")("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #";; Added this"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"gcd-poly"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"make-poly"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"gcd-terms"
0 0 24 3 2 #" ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Polys must have same variable\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"gcd-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"GCD calculation for \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 96
(
 #";; Probably is-zero would be a saner option, but would need to rewri"
 #"te that to call a term list,"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 39 #";;  as it currently works at poly level"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"a"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"gcd-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 15 #"remainder-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 27 #";; This needs to be written"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"remainder-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 76
(
 #";; Div terms returns a list of two elements, second element is the r"
 #"emainder"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"div-terms"
0 0 19 3 1 #" "
0 0 19 3 6 #"result"
0 0 19 3 1 #" "
0 0 19 3 4 #"is \""
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 9 #"div-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 12 #"remainder: \""
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"div-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"))) ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"div-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"all"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"term"
0 0 24 3 3 #") ("
0 0 14 3 6 #"=zero?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"adjoin-term"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"=zero?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 9 #"term-list"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"the-empty-termlist"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-term"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 5 #"coeff"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 5 #"coeff"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"term"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neg-terms"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 18 #"the-empty-termlist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 9 #"this-term"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"adjoin-term"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"make-term"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 9 #"this-term"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"neg"
0 0 24 3 2 #" ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 9 #"this-term"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"neg-terms"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 9 #"term-list"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"neg-poly"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"make-poly"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"neg-terms"
0 0 24 3 2 #" ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"add-poly"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"make-poly"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"add-terms"
0 0 24 3 2 #" ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Polys"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"same"
0 0 19 3 1 #" "
0 0 19 3 4 #"var:"
0 0 19 3 10 #" ADD-POLY\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 14 3 2 #"L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 2 #") "
0 0 14 3 2 #"L1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"t2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 11 #"adjoin-term"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"add-terms"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 14 3 2 #"L2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 11 #"adjoin-term"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"add-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 11 #"adjoin-term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-term"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"add-terms"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"mul-poly"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"make-poly"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"mul-terms"
0 0 24 3 2 #" ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Polys"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"same"
0 0 19 3 1 #" "
0 0 19 3 4 #"var:"
0 0 19 3 10 #" MUL-POLY\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"mul-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 18 #"the-empty-termlist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"add-terms"
0 0 24 3 2 #" ("
0 0 14 3 21 #"mul-term-by-all-terms"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 14 3 2 #"L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"mul-terms"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #") "
0 0 14 3 2 #"L2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"mul-term-by-all-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 18 #"the-empty-termlist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"adjoin-term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-term"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 3 #"mul"
0 0 24 3 2 #" ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 21 #"mul-term-by-all-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-terms"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"div-poly"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"same-variable?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tlist"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-poly"
0 0 24 3 2 #" ("
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 2 #") "
0 0 14 3 5 #"tlist"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"div-terms"
0 0 24 3 2 #" ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 3 #") ("
0 0 14 3 9 #"term-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Polys"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"same"
0 0 19 3 1 #" "
0 0 19 3 4 #"var:"
0 0 19 3 10 #" DIV-POLY\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 6 #"))))  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"div-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 15 #"empty-termlist?"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"the-empty-termlist"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 18 #"the-empty-termlist"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"t1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"t2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"first-term"
0 0 24 3 1 #" "
0 0 14 3 2 #"L2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 18 #"the-empty-termlist"
0 0 24 3 2 #") "
0 0 14 3 2 #"L1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"new-c"
0 0 24 3 2 #" ("
0 0 14 3 3 #"div"
0 0 24 3 2 #" ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"coeff"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"new-o"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"order"
0 0 24 3 1 #" "
0 0 14 3 2 #"t2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 14 #"rest-of-result"
0 0 24 3 2 #" ("
0 0 14 3 9 #"div-terms"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 9 #"add-terms"
0 0 24 3 1 #" "
0 0 14 3 2 #"L1"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 9 #"neg-terms"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 21 #"mul-term-by-all-terms"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 9 #"make-term"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-o"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                          "
0 0 14 3 2 #"L2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 14 3 2 #"L2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 54 #";; add new term to the rest of the quotient calculated"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"adjoin-term"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-term"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-o"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-c"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 14 #"rest-of-result"
0 0 24 3 3 #")) "
0 0 17 3 11 #";; quotient"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 12 #";; remainder"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 14 #"rest-of-result"
0 0 24 3 10 #"))))))))  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 34 #";; interface to rest of the system"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tag"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 10 #"attach-tag"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"add"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #" "
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 8 #"add-poly"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #" "
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 8 #"mul-poly"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"div"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #" "
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 8 #"div-poly"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"polynomial"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"terms"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-poly"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"terms"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"=zero?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"polynomial"
0 0 24 3 2 #") "
0 0 14 3 8 #"is-zero?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 47 #";; Don't forget to insert in the the hash table"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"gcd"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #" "
0 0 14 3 10 #"polynomial"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"tag"
0 0 24 3 2 #" ("
0 0 14 3 8 #"gcd-poly"
0 0 24 3 1 #" "
0 0 14 3 2 #"p1"
0 0 24 3 1 #" "
0 0 14 3 2 #"p2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 4 #"done"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 26 #"install-polynomial-package"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"make-polynomial"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"terms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"make"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"polynomial"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 5 #"terms"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"greatest-common-divisor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #") ("
0 0 14 3 13 #"apply-generic"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"gcd"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Problem"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; x^2\342\210\2222x+1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"P1"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"make-polynomial"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 3 #") ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; 11x^2+7"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"P2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"make-polynomial"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 3 #") ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; 13x+5"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"P3"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"make-polynomial"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 3 #") ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"P1"
0 0 19 3 1 #" "
0 0 19 3 4 #"is \""
0 0 24 3 1 #" "
0 0 14 3 2 #"P1"
0 0 24 3 3 #"))("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"P2"
0 0 19 3 1 #" "
0 0 19 3 4 #"is \""
0 0 24 3 1 #" "
0 0 14 3 2 #"P2"
0 0 24 3 3 #"))("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; Q1 = 11x^4 - 22x^3 + 18x^2 - 14x + 7"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"Q1"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 2 #"P1"
0 0 24 3 1 #" "
0 0 14 3 2 #"P2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; Q2 =         13x^3 - 21x^2 +  3x + 5"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"Q2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mul"
0 0 24 3 1 #" "
0 0 14 3 2 #"P1"
0 0 24 3 1 #" "
0 0 14 3 2 #"P3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 11 #"Calculating"
0 0 19 3 1 #" "
0 0 19 3 8 #"greatest"
0 0 19 3 1 #" "
0 0 19 3 6 #"common"
0 0 19 3 1 #" "
0 0 19 3 7 #"divisor"
0 0 19 3 4 #" of\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"Q1"
0 0 19 3 1 #" "
0 0 19 3 4 #"is \""
0 0 24 3 1 #" "
0 0 14 3 2 #"Q1"
0 0 24 3 3 #"))("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"Q2"
0 0 19 3 1 #" "
0 0 19 3 4 #"is \""
0 0 24 3 1 #" "
0 0 14 3 2 #"Q2"
0 0 24 3 3 #"))("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 23 #"greatest-common-divisor"
0 0 24 3 1 #" "
0 0 14 3 2 #"Q1"
0 0 24 3 1 #" "
0 0 14 3 2 #"Q2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Final result"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; {polynomial x {2 "
0 8          10 17 9 #"1458/169\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 3 #"} {"
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 8          10 17 10 #"-2916/169\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 3 #"} {"
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 8          10 17 9 #"1458/169\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; This implementation of scheme returns rational numbers, so a vali"
 #"d divisor. Whether it's the"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;  *greatest* isn't really that well defined of a question for poly"
 #"nomials"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Steps"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #";   (Q1"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 3 #"  ("
0 0 17 3 10 #"polynomial"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 3 #") ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 3 #"-22"
0 0 17 3 3 #") ("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"18"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"-14"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 5 #" 7)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #";   (Q2"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 3 #"  ("
0 0 17 3 10 #"polynomial"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"13"
0 0 17 3 3 #") ("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"-21"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 5 #" 5)))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #";   GCD "
0 0 17 3 11 #"calculation"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 3 #" (("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 3 #") ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 3 #"-22"
0 0 17 3 3 #") ("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 2 #"18"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 3 #"-14"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"7"
0 0 17 3 2 #"))"
0 0 17 3 1 #","
0 0 17 3 2 #"(("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"13"
0 0 17 3 3 #") ("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"-21"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 4 #" 5))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #";   div-terms"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 3 #" (("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 5 #"11/13"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 7 #"-55/169"
0 0 17 3 3 #")) "
0 0 17 3 10 #"remainder:"
0 0 17 3 3 #" (("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 8 #"1458/169"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 9 #"-2916/169"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 11 #" 1458/169))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";;   GCD"
0 0 17 3 1 #" "
0 0 17 3 11 #"calculation"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 3 #" (("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"13"
0 0 17 3 3 #") ("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 3 #"-21"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 2 #"))"
0 0 17 3 1 #","
0 0 17 3 2 #"(("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 8 #"1458/169"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 9 #"-2916/169"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 11 #" 1458/169))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #";   div-terms"
0 0 17 3 1 #" "
0 0 17 3 6 #"result"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 3 #" (("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 9 #"2197/1458"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 8 #"845/1458"
0 0 17 3 16 #")) remainder: ()"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #";   "
0 0 17 3 4 #"GCD "
0 0 17 3 11 #"calculation"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 3 #" (("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 8 #"1458/169"
0 0 17 3 3 #") ("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 9 #"-2916/169"
0 0 17 3 3 #") ("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 13 #"1458/169)),()"
0           0
